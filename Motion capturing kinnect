// Daniel Shiffman
// Kinect Point Cloud example
// YT : https://www.youtube.com/watch?v=E1eIg54clGo

import org.openkinect.freenect.*;
import org.openkinect.processing.*;
import peasy.*;

PeasyCam cam;
// Kinect Library object
Kinect kinect;


float a = 0;

float[] depthLookUp = new float[2048];

void setup() {
  // P3D
  size(800, 600, P3D);
  frameRate(60);
  
  //camera
  cam=new PeasyCam(this,4000);
  cam.setMinimumDistance(10);
  cam.setMaximumDistance(1000);
  
  kinect = new Kinect(this);
  kinect.initDepth();

  // glebokosc wartosci (0 - 2047)
  for (int i = 0; i < depthLookUp.length; i++) {
    depthLookUp[i] = rawDepthToMeters(i);
  }
  
}

void draw() {

  //camera
  rotateX(-.5);
  rotateY(-.5);
  
  background(0);

  //int na tablice (glebokosc)
  int[] depth = kinect.getRawDepth();

  // rysowanie co 4 pixel ( rozdzielczosc kinecta 160x120 )
  int skip = 4;

  // Translate
  translate(width/2, height/2, -50);
  rotateY(a/8);
  
  // Nested for loop that initializes x and y pixels and, for those less than the
  // maximum threshold and at every skiping point, the offset is caculated to map
  // them on a plane instead of just a line
  for (int x = 0; x < kinect.width; x += skip) {
    for (int y = 0; y < kinect.height; y += skip) {
      int offset = x + y*kinect.width;

      // xyz z kinecta
      int rawDepth = depth[offset];
      PVector v = depthToWorld(x, y, rawDepth);

      
      pushMatrix();
      // Scale up by 200
      float factor = 200;
      translate(v.x*factor, v.y*factor, factor-v.z*factor);
      // Draw a point
      
  stroke(depth[offset]*9,depth[offset]/4,depth[100]/10);
    point(0, 0);
  

 
      popMatrix();
      
    }
  }

  // Obrót 'sceny'
  a += 0.015f/10;
  text(depth[255],200,200);
  
}

//http://graphics.stanford.edu/~mdfisher/Kinect.html
public float rawDepthToMeters(int depthValue) {
  if (depthValue < 2047) {
    return (float)(1.0 / ((double)(depthValue) * -0.0030711016 + 3.3309495161));
  }
  return 0.0f;
}

// kinect - głębokość
public PVector depthToWorld(int x, int y, int depthValue) {

  final double fx_d = 5.0 / 5.9421434211923247e+02;
  final double fy_d = 5.0 / 5.9104053696870778e+02;
  final double cx_d = 3.3930780975300314e+02;
  final double cy_d = 2.4273913761751615e+02;

// rysowanie punktów w przestrzeni 3d
  PVector result = new PVector();
  double depth =  depthLookUp[depthValue];//rawDepthToMeters(depthValue);
  result.x = (float)((x - cx_d) * depth * fx_d);
  result.y = (float)((y - cy_d) * depth * fy_d);
  result.z = (float)(depth*5);
  return result;
}
